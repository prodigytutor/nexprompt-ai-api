// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url = "postgresql://prisma.zoleidtxjiovgvfwbkya:AngelBlueMissy13579@aws-0-us-east-2.pooler.supabase.com:6543/postgres?pgbouncer=true"
  directUrl = "postgresql://prisma.zoleidtxjiovgvfwbkya:AngelBlueMissy13579@aws-0-us-east-2.pooler.supabase.com:5432/postgres"

}


model UserApiLimit {
  id        String      @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model test {
  id    String @id @default(cuid())
  name String
}
model UserSubscription {
  id        String      @id @default(cuid())
  userId    String   @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Prompt {
  id                String         @id @default(cuid())
  name              String
  description       String?
  promptText        String
  responseFormat    String?         @default("json")
  parameters        Json?
  rateLimit         Int?            @default(100)
  accessControl     Json?
  apiKeyRequired    Boolean?        @default(true)
  aiProvider        String?         @default("openai")
  aiModel           String?
  versions          PromptVersion[]
  logs              AnalyticsLog[]
  slug              String?
  url               String?
  customDomain      String?
  userId            String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model PromptVersion {
  id          String   @id @default(cuid())
  promptId    String
  version     Int
  promptText  String
  parameters  Json
  createdAt   DateTime @default(now())

  prompt      Prompt   @relation(fields: [promptId], references: [id])
}

model ApiKey {
      id          String    @id @default(uuid())
      hashedKey   String    @unique // Store hash of the actual key
      prefix      String    @unique // e.g., 'sk_live_' - first few chars for identification
      description String?
      createdAt   DateTime  @default(now())
      lastUsedAt  DateTime?
      expiresAt   DateTime? // Optional expiration
      isActive    Boolean   @default(true)

      // Optional: Link to a User model
       userId      String?
       user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

      @@index([prefix])
      @@index([hashedKey])
     @@index([userId]) // Index if linking to users
    }

model AnalyticsLog {
  id          String   @id @default(cuid())
  promptId    String
  timestamp   DateTime @default(now())
  requestBody Json
  response    Json
  durationMs  Int

  prompt      Prompt   @relation(fields: [promptId], references: [id])
}

model Content {
  id        String   @id
  title     String
  body      String
  channel   String
  type      String
  userId    String
  projectId String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  Project   Project? @relation(fields: [projectId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Project {
  id              String        @id
  name            String
  userId          String
  audience        String
  brand           String?
  tone            String?
  keywords        String?
  channels        String?
  format          String?
  existingContent String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  status          ProjectStatus
  avatar          String?
  Content         Content[]
  User            User          @relation(fields: [userId], references: [id])
}

model User {
  id        String    @id
  email     String    @unique
  password  String
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  Content   Content[]
  Project   Project[]
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
  DRAFT
}

